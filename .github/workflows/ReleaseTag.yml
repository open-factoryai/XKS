name: Tag Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -timeout=10m ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        skip-cache: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    continue-on-error: true
    outputs:
      security-summary: ${{ steps.security-report.outputs.summary }}
      security-details: ${{ steps.security-report.outputs.details }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Gosec Security Scanner
      id: gosec
      run: |
        # Install gosec
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        # Run gosec et capture les résultats
        gosec -no-fail -fmt json -out results.json ./... || echo "Gosec completed with warnings"
        gosec -no-fail -fmt sarif -out results.sarif ./... || echo "SARIF generation completed"
        
        # Générer un résumé lisible
        gosec -no-fail -fmt text -out results.txt ./... || echo "Text report generated"

    - name: Parse security results
      id: security-report
      run: |
        # Compter les issues par sévérité
        HIGH_COUNT=$(jq '[.Issues[] | select(.severity == "HIGH")] | length' results.json 2>/dev/null || echo "0")
        MEDIUM_COUNT=$(jq '[.Issues[] | select(.severity == "MEDIUM")] | length' results.json 2>/dev/null || echo "0")
        LOW_COUNT=$(jq '[.Issues[] | select(.severity == "LOW")] | length' results.json 2>/dev/null || echo "0")
        TOTAL_COUNT=$((HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
        
        # Créer un résumé
        if [ "$TOTAL_COUNT" -eq 0 ]; then
          SUMMARY="✅ **Aucun problème de sécurité détecté**"
          STATUS="✅ CLEAN"
        else
          SUMMARY="⚠️ **$TOTAL_COUNT problème(s) de sécurité détecté(s)**"
          STATUS="⚠️ ISSUES FOUND"
        fi
        
        # Créer les détails
        DETAILS=""
        if [ "$HIGH_COUNT" -gt 0 ]; then
          DETAILS="${DETAILS}- 🔴 **Critique**: $HIGH_COUNT issue(s)\n"
        fi
        if [ "$MEDIUM_COUNT" -gt 0 ]; then
          DETAILS="${DETAILS}- 🟡 **Moyen**: $MEDIUM_COUNT issue(s)\n"
        fi
        if [ "$LOW_COUNT" -gt 0 ]; then
          DETAILS="${DETAILS}- 🟢 **Faible**: $LOW_COUNT issue(s)\n"
        fi
        
        # Ajouter les règles les plus fréquentes
        if [ "$TOTAL_COUNT" -gt 0 ]; then
          echo "Top issues found:" >> security_summary.txt
          jq -r '.Issues[] | .rule_id' results.json 2>/dev/null | sort | uniq -c | sort -nr | head -5 >> security_summary.txt || true
        fi
        
        # Exporter pour les autres jobs
        echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
        echo "details<<EOF" >> $GITHUB_OUTPUT
        echo -e "$DETAILS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "total=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low=$LOW_COUNT" >> $GITHUB_OUTPUT

    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

    - name: Upload Security Results as Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: |
          results.json
          results.sarif
          results.txt
          security_summary.txt

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get tag version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build all platforms
      env:
        CGO_ENABLED: 0
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        mkdir -p dist
        LDFLAGS="-X main.version=${VERSION} -s -w"
              
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o dist/xks-linux-amd64 .
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o dist/xks-linux-arm64 .
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o dist/xks-darwin-amd64 .
        
        # macOS ARM64
        GOOS=darwin GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o dist/xks-darwin-arm64 .
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o dist/xks-windows-amd64.exe .

    - name: Create archives
      run: |
        cd dist
        for binary in xks-*; do
          if [[ "$binary" == *.exe ]]; then
            zip "${binary}-${{ steps.version.outputs.VERSION }}.zip" "$binary"
          else
            tar -czf "${binary}-${{ steps.version.outputs.VERSION }}.tar.gz" "$binary"
          fi
        done

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(sed -n "/^## \[${GITHUB_REF#refs/tags/}\]/,/^## \[/p" CHANGELOG.md | head -n -1 | tail -n +2)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changelog available for this release."
          fi
        else
          CHANGELOG="No changelog available for this release."
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Download security results
      uses: actions/download-artifact@v4
      with:
        name: security-results
        path: security/

    - name: Create release with security report
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## ${{ steps.version.outputs.VERSION }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## 🔒 Rapport de Sécurité
          
          ${{ needs.security.outputs.security-summary }}
          
          ### Détails du scan
          ${{ needs.security.outputs.security-details }}
          
          **Status**: ${{ needs.security.outputs.status }}
          
          > 📊 Scan effectué avec [Gosec](https://github.com/securego/gosec)  
          > 📋 Rapport complet disponible dans les [Security Insights](../../security/code-scanning)
          
          ### Downloads
          - **Linux AMD64**: `xks-linux-amd64-${{ steps.version.outputs.VERSION }}.tar.gz`
          - **Linux ARM64**: `xks-linux-arm64-${{ steps.version.outputs.VERSION }}.tar.gz`
          - **macOS AMD64**: `xks-darwin-amd64-${{ steps.version.outputs.VERSION }}.tar.gz`
          - **macOS ARM64**: `xks-darwin-arm64-${{ steps.version.outputs.VERSION }}.tar.gz`
          - **Windows AMD64**: `xks-windows-amd64-${{ steps.version.outputs.VERSION }}.zip`
          
          ### Installation
          
          **Linux/macOS:**
          ```bash
          # Download and extract
          tar -xzf xks-{platform}-{arch}-${{ steps.version.outputs.VERSION }}.tar.gz
          
          # Make executable and move to PATH
          chmod +x xks-{platform}-{arch}
          sudo mv xks-{platform}-{arch} /usr/local/bin/xks
          ```
          
          **Windows:**
          ```cmd
          # Extract xks-windows-amd64-${{ steps.version.outputs.VERSION }}.zip
          # Add the executable to your PATH
          ```
          
          **Verify installation:**
          ```bash
          xks --version
          ```
        files: |
          dist/*.tar.gz
          dist/*.zip
          security/results.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries-${{ steps.version.outputs.VERSION }}
        path: dist/